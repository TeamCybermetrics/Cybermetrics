name: Backend CI

on:
  # Always run on PRs/pushes to main/develop (no paths filter here)
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  backend-ci:
    name: Backend - Install, Build & Run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Detect whether server/** changed in this PR/push
      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            server:
              - 'server/**'

      # If server/** didn't change, exit successfully so the required check goes green
      - name: No server changes — skip backend steps
        if: steps.changes.outputs.server != 'true'
        run: |
          echo "No changes in server/**. Skipping backend CI."
          exit 0

      # Real backend work only when server/** changed
      - name: Setup Python
        if: steps.changes.outputs.server == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: server/requirements.txt

      - name: Install dependencies
        if: steps.changes.outputs.server == 'true'
        working-directory: ./server
        run: |
          echo "📦 Installing dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Installation successful"

      - name: Create Firebase credentials file
        if: steps.changes.outputs.server == 'true'
        working-directory: ./server
        run: |
          echo "🔐 Setting up Firebase credentials..."
          echo '${{ secrets.FIREBASE_CREDENTIALS }}' > serviceAccountKey.json
          echo "✅ Credentials file created"

      - name: Create .env file
        if: steps.changes.outputs.server == 'true'
        working-directory: ./server
        run: |
          cat << 'EOF' > .env
          FIREBASE_CREDENTIALS_PATH=./serviceAccountKey.json
          FIREBASE_WEB_API_KEY=${{ secrets.FIREBASE_WEB_API_KEY }}
          ENVIRONMENT=testing
          HOST=0.0.0.0
          PORT=8000
          EOF

      - name: Verify imports
        if: steps.changes.outputs.server == 'true'
        working-directory: ./server
        run: |
          echo "🔍 Verifying all imports..."
          python -c "import fastapi; print('✓ FastAPI')"
          python -c "import firebase_admin; print('✓ Firebase Admin')"
          python -c "import uvicorn; print('✓ Uvicorn')"
          python -c "from pybaseball import batting_stats; print('✓ Pybaseball')"
          python -c "from rapidfuzz import fuzz; print('✓ RapidFuzz')"
          python -c "import httpx; print('✓ httpx')"
          python -c "import pytest; print('✓ Pytest')"
          echo "✅ All imports successful"
      
      - name: Run unit tests
        if: steps.changes.outputs.server == 'true'
        working-directory: ./server
        run: |
          echo "🧪 Running unit tests..."
          pytest domain/tests services/tests models/tests middleware/tests -v --tb=short --maxfail=5
          echo "✅ Unit tests passed"
      
      - name: Run integration tests
        if: steps.changes.outputs.server == 'true'
        working-directory: ./server
        run: |
          echo "🔗 Running integration tests..."
          pytest tests/integration -v --tb=short --maxfail=3
          echo "✅ Integration tests passed"
        continue-on-error: true
      
      - name: Run E2E tests
        if: steps.changes.outputs.server == 'true'
        working-directory: ./server
        run: |
          echo "🌐 Running E2E tests..."
          pytest tests/e2e -m e2e -v --tb=short --maxfail=3
          echo "✅ E2E tests passed"
        continue-on-error: true

      - name: Test app startup
        if: steps.changes.outputs.server == 'true'
        working-directory: ./server
        run: |
          echo "🚀 Testing if app can start..."
          timeout 10s uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 5
          curl -f http://localhost:8000/health || echo "Health check endpoint not responding (this may be expected)"
          echo "✅ App startup test completed"
        continue-on-error: true

      - name: Cleanup credentials
        if: always()
        working-directory: ./server
        run: |
          rm -f serviceAccountKey.json
          rm -f .env

      - name: Summary
        if: success()
        run: |
          echo "=================================="
          echo "✅ Backend CI Passed"
          echo "=================================="
          echo "All backend checks completed successfully!"